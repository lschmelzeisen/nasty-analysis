#
# Copyright 2020 Lukas Schmelzeisen
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from datetime import date, datetime
from enum import Enum
from pathlib import Path
from typing import Iterable, Iterator, Mapping, Optional, Sequence, overload

class SearchFilter(Enum):
    TOP = ...
    LATEST = ...
    PHOTOS = ...
    VIDEOS = ...
    def to_json(self) -> str: ...
    @classmethod
    def from_json(cls, obj: str) -> "SearchFilter": ...

class Request: ...

class Search(Request):
    query: str = ...
    since: Optional[date] = ...
    until: Optional[date] = ...
    filter: SearchFilter = ...
    lang: str = ...
    def __init__(
        self,
        query: str,
        *,
        since: Optional[date] = ...,
        until: Optional[date] = ...,
        filter_: SearchFilter = ...,
        lang: str = ...,
        max_tweets: Optional[int] = ...,
        batch_size: int = ...,
    ): ...
    def to_daily_requests(self) -> Sequence["Search"]: ...

class BatchEntry:
    request: Request = ...

class Batch:
    def append(self, request: Request) -> None: ...
    def load(self, file: Path) -> None: ...
    def dump(self, file: Path) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, item: object) -> bool: ...
    @overload
    def __getitem__(self, _index: int) -> BatchEntry: ...
    @overload  # noqa: F811
    def __getitem__(self, _slice: slice) -> Sequence[BatchEntry]: ...
    def __iter__(self) -> Iterator[BatchEntry]: ...

class User:
    name: str = ...
    screen_name: str = ...

class Tweet:
    user: User = ...
    url: str = ...
    created_at: datetime = ...
    text: str = ...
    def to_json(self) -> Mapping[str, object]: ...

class BatchResults(Sequence[BatchEntry]):
    def tweets(self, entry: BatchEntry) -> Iterable[Tweet]: ...
    def __init__(self, results_dir: Path): ...
    def __len__(self) -> int: ...
    def __contains__(self, item: object) -> bool: ...
    @overload
    def __getitem__(self, _index: int) -> BatchEntry: ...
    @overload  # noqa: F811
    def __getitem__(self, _slice: slice) -> Sequence[BatchEntry]: ...
    def __iter__(self) -> Iterator[BatchEntry]: ...
